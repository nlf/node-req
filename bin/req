#!/usr/bin/env node
var request = require('request'),
    fs = require('fs'),
    mime = require('mime'),
    url = require('url'),
    stream = require('stream'),
    path = require('path'),
    ProgressBar = require('progress'),
    prompt = require('prompt'),
    async = require('async'),
    argv = require('optimist')
        .alias('h', 'headers')
        .alias('f', 'file')
        .alias('d', 'data')
        .alias('o', 'options')
        .alias('q', 'query')
        .alias('t', 'timeout')
        .alias('w', 'write')
        .boolean('v')
        .argv,
    method,
    uri,
    body,
    headers,
    options,
    querystring,
    username,
    password,
    oldmethod,
    usage = 'req: [method] uri';

if (argv.d && argv.f) {
    console.log('only specify file or data, not both'); 
    process.exit(1);
}

if (argv._.length === 2) {
    method = argv._[0].toUpperCase();
    uri = argv._[1];
} else if (argv._.length === 1) {
    method = (argv.f || argv.d) ? 'POST' : 'GET';
    uri = argv._[0];
} else {
    console.log(usage);
    process.exit(1);
}

if (!uri.match(/^https?|ftp/)) {
    uri = 'http://' + uri;
}

if (argv.d) {
    headers = {};
    try {
        var test = JSON.parse(argv.d);
        body = argv.d;
        headers['content-type'] = 'application/json';
    } catch (err) {
        body = argv.d;
        headers['content-type'] = 'application/octet-stream';
        console.log('WARNING: defaulting Content-Type header to application/octet-stream');
    }
}

function generateOpts(arg) {
    var a = [],
        obj = {};
    if (!(arg instanceof Array)) {
        a.push(arg);
    } else {
        a = arg;
    }
    for (var i = 0; i < a.length; i++) {
        var type, data;
        type = a[i].substring(0, a[i].indexOf('='));
        data = a[i].substring(a[i].indexOf('=') + 1);
        obj[type] = data;
    }
    return obj;
}

if (argv.q) querystring = generateOpts(argv.q);
if (argv.o) options = generateOpts(argv.o); 
if (argv.h) headers = generateOpts(argv.h); 

var args = {};
if (headers) args.headers = headers;
if (querystring) args.qs = querystring;
if (body) args.body = body;
if (argv.t) args.timeout = parseInt(argv.t, 10);
if (!options) options = {};
Object.keys(options).forEach(function (key) {
    args[key] = options[key];
});
args.method = method;
args.uri = uri;
if (argv.u) username = argv.u;
if (argv.p) password = argv.p;

function genAuth(username, password, callback) {
    if (username) {
        var ouri = url.parse(uri);
        if (password) {
            ouri.auth = username + ':' + password;
            uri = url.format(ouri);
            callback(uri);
        } else {
            prompt.start();
            prompt.get([{ name: 'password', hidden: true }], function (err, result) {
                password = result.password;
                ouri.auth = username + ':' + password;
                uri = url.format(ouri);
                callback(uri);
            });
        }
    } else {
        callback(uri);
    }
}

function findFilename(filename) {
    if (filename && path.existsSync(filename)) {
        if (filename.match(/\.[0-9]*$/)) {
            var v = filename.match(/\.([0-9]*)$/)[1];
            v = parseInt(v, 10) + 1;
            filename = filename.match(/(.*\.)[0-9]*$/)[1] + v;
        } else {
            filename = filename + '.1';
        }
        return findFilename(filename);
    } else {
        return filename;
    }
}

function output(filename, length) {
    if (filename) filename = findFilename(filename);
    var realout = filename ? fs.createWriteStream(filename) : process.stdout;
    var bar;
    if (length && !isNaN(length) && realout !== process.stdout) bar = new ProgressBar(':bar :percent', { total: length, width: 25 });
    var writestream = new stream.Stream();
    writestream.writable = true;
    writestream.write = function (data) {
        try {
            if (realout === process.stdout) {
                if (typeof data === 'object' && !Buffer.isBuffer(data)) {
                    console.log(data);
                } else {
                    console.log(JSON.parse(data.toString()));
                }
            } else {
                realout.write(data);
            }
        } catch (err) {
            realout.write(JSON.stringify(data));
        }
        if (bar) {
            bar.tick(data.length);
            if (bar.curr === bar.total) process.stdout.write('\n');
        }
    }
    writestream.end = function (data) {
        if (realout === process.stdout) process.stdout.write('\n');
    }
    return writestream;
}

function defCallback(err, res, body) {
    if (err) {
        console.log(err);
        process.exit(1);
    } else {
        if (argv.v) console.log('RESPONSE:', res.headers);
        if (res.headers['www-authenticate']) {
            if (res.headers['www-authenticate'].match(/Basic/)) {
                console.log('this site requires authentication');
                prompt.start();
                prompt.get(['username'], function (err, result) {
                    username = result.username;
                    if (oldmethod) args.method = oldmethod;
                    if (args.callback) delete args.callback;
                    genAuth(username, password, makeRequest);
                });
            }
        } else {
            if (body) {
                output(argv.w).write(body);
            } else {
                if (!argv.v) output(argv.w).write(JSON.stringify(res.headers));
            }
        }
    }
}

function makeRequest(uri) {
    args.uri = uri;
    if (argv.v) console.log('REQUEST:', args);
    if (!args.encoding) args.encoding = null;
    if (method === 'GET') {
        oldmethod = args.method;
        var filename = argv.w ? argv.w : null;
        args.method = 'HEAD';
        request(args, function (err, res, body) {
            if (err) {
                console.log(err);
                process.exit(1);
            } else {
                if (argv.v) console.log('RESPONSE:', res.headers);
                if (res.headers['www-authenticate'] && res.headers['www-authenticate'].match(/Basic/)) {
                    console.log('this site requires authentication');
                    prompt.start();
                    prompt.get(['username'], function (err, result) {
                        username = result.username;
                        if (oldmethod) args.method = oldmethod;
                        if (args.callback) delete args.callback;
                        genAuth(username, password, makeRequest);
                    });
                } else if (res.headers['content-type']) {
                    var ctype = res.headers['content-type'];
                    if (!ctype.match(/^text.*|application\/json.*/)) {
                        if (!filename) {
                            if (res.headers['content-disposition']) {
                                filename = res.headers['content-disposition'].match(/filename="?([^"]*)"?/)[1];
                            } else {
                                var pathname = url.parse(res.request.path).pathname.split('/');
                                filename = pathname[pathname.length - 1];
                            }
                            if (!filename) {
                                console.log('WARNING: could not determine filename, saving as "unknown"');
                                filename = 'unknown';
                            }
                        }
                    }
                    args.method = oldmethod;
                    delete args.callback;
                    request(args).pipe(output(filename, parseInt(res.headers['content-length'], 10)));
                } else {
                    args.method = oldmethod;
                    request(args, defCallback);
                }
            }
        });
    } else if (argv.f && (method === 'POST' || method === 'PUT')) {
        fs.stat(argv.f, function (err, stat) {
            args.headers = { 'content-length': stat.size };
            fs.createReadStream(argv.f).pipe(request(args, defCallback));
        });
    } else {
        request(args, defCallback);
    }
}

genAuth(username, password, makeRequest);
